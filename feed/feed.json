{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Scrambled Brains for Breakfast",
	"language": "en",
	"home_page_url": "https://example.com/",
	"feed_url": "https://example.com/feed/feed.json",
	"description": "A place to throw my scrambled brains against the wall to see what sticks.",
	"author": {
		"name": "Sam Westwood",
		"url": "https://sam.thewestwoods.us"
	},
	"items": [
		{
			"id": "https://example.com/blog/2024-03-04-moving-one-step-forward/",
			"url": "https://example.com/blog/2024-03-04-moving-one-step-forward/",
			"title": "Moving One Step Forward",
			"content_html": "<h2 id=\"more-11ty-fun\" tabindex=\"-1\">More 11ty fun! <a class=\"header-anchor\" href=\"https://example.com/blog/2024-03-04-moving-one-step-forward/\">#</a></h2>\n<ul>\n<li>[X] Replace home page with latest blog post.</li>\n<li>[X] Fix web fonts (actually link the stylesheets inside the <head> of the index)</head></li>\n</ul>\n<p>I feel so much better now to get those checked off the list! <em><strong>Whew!</strong></em></p>\n<h2 id=\"worky-work\" tabindex=\"-1\">Worky Work <a class=\"header-anchor\" href=\"https://example.com/blog/2024-03-04-moving-one-step-forward/\">#</a></h2>\n<p>One thing that I have noticed about myself is that at the end of the work-day I am not great at writing. I should do this more in the morning.</p>\n<p>Time for some more coffee ‚òïÔ∏è.</p>\n",
			"date_published": "2024-03-04T00:00:00Z"
		}
		,
		{
			"id": "https://example.com/blog/2024-03-02-triumph-of-the-blogman/",
			"url": "https://example.com/blog/2024-03-02-triumph-of-the-blogman/",
			"title": "Triumph of the Blogman",
			"content_html": "<p>I spent my free time this week converting my github pages site from jekyll to <a href=\"https://11ty.dev\">11ty</a>. I'm fairly new to the whole static-site-generator scene. My blog only had 2 or 3 posts. The main problem I had with jekyll is the build times. My site, with only a few posts and a fairly simple theme took around <strong>5 minutes</strong> to build. Could it be any slower? It is also written in <em>perl</em> ü§¢. (There is <em>probably</em> nothing wrong with the perl language, but it is <em>sooo</em> 1990, and I know <strong>nothing</strong> about it.) For the same content, <em>11ty</em> builds only take about <em><strong>25 seconds</strong></em>. Less than a minute after doing a <code>git push</code>, I can see the update on my site! 11ty is written in JavaScript too, so it's a bit more familiar for me.</p>\n<h2 id=\"issues\" tabindex=\"-1\">Issues <a class=\"header-anchor\" href=\"https://example.com/blog/2024-03-02-triumph-of-the-blogman/\">#</a></h2>\n<p>Throughout this process I ran into a few issues. The first problem was that I didn't know how to stop using jekyll. Github pages default to building with jekyll, and from searching and reading I had gathered that it was possible. However, the forums and tutorials that I found were not very clear about the process. Well‚Äîdisabling jekyll is pretty easy. Just add an empty file called <code>.nojekyll</code> to the repository. What I had a hard time with was <em>replacing</em> jekyll with something else. I ended up finding <a href=\"https://www.linkedin.com/pulse/eleventy-github-pages-lea-tortay/\">this tutorial</a> from 4 years ago that worked.</p>\n<h3 id=\"github-actions\" tabindex=\"-1\">GitHub actions <a class=\"header-anchor\" href=\"https://example.com/blog/2024-03-02-triumph-of-the-blogman/\">#</a></h3>\n<ol>\n<li>First create a <code>.nojekyll</code> file.</li>\n<li>Create a <code>.github/workflows/</code> folder and run <code>git add .github</code></li>\n<li>Create a custom github action, like the following:</li>\n</ol>\n<pre class=\"language-yaml\" tabindex=\"0\"><code class=\"language-yaml\"><span class=\"token comment\"># .github/workflows/build.yml</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build Eleventy\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span><span class=\"token number\">22.04</span>\n\n    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>16.x<span class=\"token punctuation\">]</span>\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js $NaN\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> $NaN\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies &amp; build\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          npm ci\n          npm run build</span>\n\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">publish_dir</span><span class=\"token punctuation\">:</span> ./_site <span class=\"token comment\">#this should match the output folder from eleventy.config.js</span>\n          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $</code></pre>\n<ol start=\"4\">\n<li>In the repo settings, <strong>change the pages Build Source</strong> to the <code>gh-pages</code> branch. (This took me several hours to figure out.) The custom action runs everytime the main branch is updated. The custom action updates the gh-pages branch with the built output of the site. Failing to change the GitHub Pages Build Source will result in a 404 error and tell you that there is no index.html file when you attempt to navigate to your site.</li>\n</ol>\n<h3 id=\"look-and-feel\" tabindex=\"-1\">Look and Feel <a class=\"header-anchor\" href=\"https://example.com/blog/2024-03-02-triumph-of-the-blogman/\">#</a></h3>\n<p>I decided to use <a href=\"https://github.com/11ty/eleventy-base-blog\">eleventy-base-blog</a> as a starting point for my theme. As an 11ty beginner, it offers a good structure and includes some default plugins already activated. (I think after the last few days of playing around, I am a bit more comfortable with the eleventy.config.js file.) Now, me being me, I can't just leave the default options in place.</p>\n<h4 id=\"theme-colors\" tabindex=\"-1\">Theme Colors <a class=\"header-anchor\" href=\"https://example.com/blog/2024-03-02-triumph-of-the-blogman/\">#</a></h4>\n<p>Thankfully eleventy-base-blog includes support for automatic light and dark modes. The light theme is pretty much perfect, but the dark theme had some weird link colors. Light-purplish on a dark blue background üò†, really?! I changed it to shade of Vivid Blue. Found in <code>public/css/index.css</code>.</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">prefers-color-scheme</span><span class=\"token punctuation\">:</span> dark<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">--color-gray-20</span><span class=\"token punctuation\">:</span> #e0e0e0<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token property\">--color-gray-50</span><span class=\"token punctuation\">:</span> #C0C0C0<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token property\">--color-gray-90</span><span class=\"token punctuation\">:</span> #dad8d8<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/* --text-color is assigned to --color-gray-_ above */</span>\n\t\t<span class=\"token property\">--text-color-link</span><span class=\"token punctuation\">:</span> #1493fb<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token property\">--text-color-link-active</span><span class=\"token punctuation\">:</span> #2d9ffb<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token property\">--text-color-link-visited</span><span class=\"token punctuation\">:</span> #5fb6fc<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token property\">--background-color</span><span class=\"token punctuation\">:</span> #15202b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"font-family\" tabindex=\"-1\">Font Family <a class=\"header-anchor\" href=\"https://example.com/blog/2024-03-02-triumph-of-the-blogman/\">#</a></h4>\n<p>The default settings are set up with a very basic <em>sans</em> font family. It looks small compared to the text in the code blocks as well. I found a great font family on Google Fonts called <a href=\"https://fonts.google.com/specimen/Amiri?query=Amiri\">Amiri</a>. I made some more changes in the css.</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">:root</span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">--font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Amiri\"</span><span class=\"token punctuation\">,</span> serif<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">body</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--font-family<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1.12em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The font used in the code blocks seemed too large for my taste. This turned into a learning moment. I thought I could simply change the <code>font-size</code> for the <code>pre</code> blocks to something like <code>.9em</code>. Turns out that didn't change anything.  Apparently the way css inherits variable font sizes inside child elements means that <code>em</code> doesn't  reference anything. I found that inside of the <code>pre</code> block you must use <code>rem</code> instead. <code>rem</code> references the root of the document.</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">:not(pre) > code[class*=\"language-\"],\npre[class*=\"language-\"]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> .9rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>Much better!</strong></p>\n<p>Time for a nightcap. Goodnight! ü•±</p>\n",
			"date_published": "2024-03-02T00:00:00Z"
		}
		,
		{
			"id": "https://example.com/blog/2024-02-25-snorkeling/",
			"url": "https://example.com/blog/2024-02-25-snorkeling/",
			"title": "Snorkeling",
			"content_html": "<p>I am now a T-mobile Home Internet customer. It uses 4G LTE and 5G cellular networks to provide internet connectivity. They provide you with a cellular modem/router with a wifi hotspot and a couple of ethernet ports. I figured out how to disable the wifi and connected it to the WAN port of my UDM Pro. Easy-peasy.</p>\n<p>There are some trade offs. There is some variability in the signal quality, which translates to extra latency some of the time. The cellular networks also use CG-NAT and <strong>T-mobile does not provide a public IP address.</strong></p>\n<p>I could get around this by setting up some <em>Cloudflare tunnels</em>. They are easy and work great. The main problem is that I want to control my own SSL certificates. Cloudflare creates a wildcard certificate for subdomains (*.mydomain.io), but only root level subdomains. Inside my LAN I use sub-subdomains. For example, <em>service.computername</em>.mydomain.io. For publicly exposed services I prefer using the same URL inside my LAN and over WAN, and Cloudflare tunnels are not able to give me that.</p>\n<p>My LAN is now diving beneath the depths CG-NAT. I need a snorkel.</p>\n<pre class=\"language-txt\" tabindex=\"0\"><code class=\"language-txt\">    public ip (vps)\n\n     |  s  |\n/\\/\\/|  n  |\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n     |  o  |  Deep Waters of CG-NAT\n     |  r  |\n     |  k  |\n     |  e  |\n     |  l  |\n     \\     \\________\n      \\  tailscale --> DMZ --> LAN\n       \\____________\n</code></pre>\n<p>So basically, I‚Äôve got a VPS with a public IP. It connects to my DMZ proxy server through my Tailscale tailnet. The VPS forwards any traffic it receives on ports 80 and 443 to the proxy server. <strong>¬°Viola! A snorkel!</strong></p>\n<h2 id=\"forwarding-packets\" tabindex=\"-1\">Forwarding Packets <a class=\"header-anchor\" href=\"https://example.com/blog/2024-02-25-snorkeling/\">#</a></h2>\n<p>My initial thought was to turn my VPS into a router. I tried using iptables to forward ports, but I‚Äôm not very good at writing rules and had a few problems. I couldn‚Äôt figure out how to forward packets through tailscale. ü§î After some more searching around the interwebs I found an old program called <em><a href=\"https://github.com/samhocevar/rinetd\">rinetd</a></em>.</p>\n<h3 id=\"rinetd-setup\" tabindex=\"-1\">rinetd setup <a class=\"header-anchor\" href=\"https://example.com/blog/2024-02-25-snorkeling/\">#</a></h3>\n<p><em>rinetd</em> silently forwards tcp and udp traffic. It is found in most linux package managers. I‚Äôm using an Ubuntu server, so I installed it with an easy <code>sudo apt install rinetd</code>. The configuration file is found in <code>/etc/rinetd.conf</code>. The main section looks like this:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token comment\"># bindaddress bindport connectaddress connectport</span>\n<span class=\"token number\">137.184</span>.89.83 <span class=\"token number\">80</span> <span class=\"token number\">100.86</span>.67.77 <span class=\"token number\">80</span>\n<span class=\"token number\">137.184</span>.89.83 <span class=\"token number\">443</span> <span class=\"token number\">100.86</span>.67.77 <span class=\"token number\">443</span></code></pre>\n<p>The <code>bindaddress</code> is the public ip of the VPS, and the <code>connectaddress</code> is the tailnet address of the proxy server. Easy. After updating the configuration, run a quick <code>systemctl start rinetd</code> and you are set. No need to mess with forwarding rules. It just works.</p>\n<p>Time to make more coffee.</p>\n",
			"date_published": "2024-02-25T00:00:00Z"
		}
		,
		{
			"id": "https://example.com/blog/2024-02-24-diving-into-the-deep/",
			"url": "https://example.com/blog/2024-02-24-diving-into-the-deep/",
			"title": "Diving into the deep",
			"content_html": "<p>Recently I had a little <em>snafu</em> with Xfinity. I have been an Xfinity customer for more than a decade. In my area, it has really been the <em>only</em> option for high-speed internet connections. I have always felt uneasy about the leverage that Xfinity has had over the market. I hate the equipment fees, and the lack of good customer service. I refused to use an Xfinity router or modem, instead opting to buy my own.</p>\n<p>A few years ago they implemented a data cap, and I ‚Äî untrusting of the monopoly-induced power of the company ‚Äî purchased a UDM Pro SE and started measuring my own data usage. Throughout these years the usage reported by Xfinity was typically higher than my own measurements, but within a reasonable margin of error. However, that changed in December of 2023. During that month the UDM Pro measured about 800GB of throughput, and Xfinity reported a whopping <strong>2400GB</strong> of usage! <strong>Three times more</strong>!</p>\n<p>I walked in to the nearest Xfinity store intending to ask for a service ticket. <s>However, I was told in no uncertain terms that <em><strong>the Lord God of Xfinity</strong></em> in it's <em><strong>mighty Glory</strong></em> and <em><strong>omnicient knowing</strong></em> is the <em>only</em> source of <strong>truth</strong>. My own paltry attempt at measuring throughput was meaningless. <em>Xfinity's</em> mighty judgement would not be questioned! How dare I question it?</s> <em>Okay, okay... those were not their exact words, but they are not <strong>that</strong> hyperbolic either.</em> They refused to submit a service ticket on my behalf, and told me to quietly pay the bill of over $300, <s>and that I should leave with a <em>smile</em> on my face</s>.</p>\n<p><strong>Instead I left with a solid resolve to cancel my account.</strong> I saw the commercials for T-Mobile Home Internet, advertised for $50 a month with <em>unlimited</em> data usage. It actually ended up being slightly cheaper than that since I am an existing T-mobile customer. It offers better speeds than any other ISP in my area besides Xfinity, and I am happy with my choice (so far). A week or so later I closed my Xfinity account and I am not looking back.</p>\n<p>T-mobile home internet brings some additional challenges. Namely, I am now sitting behind a messy CG-NAT. I do not have a public IP address to access my home network. If you google around a bit, most people solve this by using a <em>Cloudflare</em> tunnel. I have used them before, and it is an easy and effective solution, even providing ssl certificates automatically. But, <em>I</em> prefer doing things the <em>hard</em> way. It's the only way to learn something new.</p>\n<p>This post is getting quite long. Now that you know the backstory, I will post the <em>exciting</em> details of my own personal solution to these problems.</p>\n<p>Time to make more coffee.</p>\n",
			"date_published": "2024-02-24T00:00:00Z"
		}
		
	]
}
